说一下闭包？

闭包的实质是因为函数嵌套而形成的作用域链

闭包的定义即：函数 A 内部有一个函数 B，函数 B 可以访问到函数 A 中的变量，那么函数 B 就是闭包

49. 闭包的好处

(1)希望一个变量长期驻扎在内存当中(不被垃圾回收机制回收)

(2)避免全局变量的污染

(3)私有成员的存在

(4)安全性提高

10. 闭包是什么，有什么特性，对页面有什么影响

答案：闭包就是能够读取其他函数内部变量的函数,使得函数不被GC回收，如果过多使用闭包，容易导致内存泄露


1.基本数据类型（自身不可拆分的）：Undefined、Null、Boolean、Number、String
2.引用数据类型（对象）：Object （Array，Date，RegExp，Function）
ES6基本数据类型多了个 symbol 据说这道题刷了百分之二十的人 感谢Abbyshen提出

function gettype(nm){
    return Object.prototype.toString.call(nm);
}


7. call和apply的区别

答案：
Object.call(this,obj1,obj2,obj3)
Object.apply(this,arguments)




16. ”==”和“===”的不同

答案：前者会自动转换类型,再判断是否相等
后者不会自动类型转换，直接去比较


21. Javascript3 种事件模型吗

    DOM0级模型
    又称为原始事件模型，在该模型中，事件不会传播，即没有事件流的概念。事件绑定监听函数比较简单, 有两种方式:

    HTML代码中直接绑定:

    1
    <input type="button" onclick="fun()">
    通过JS代码指定属性值:

    1
    2
    var btn = document.getElementById('.btn');
    btn.onclick = fun;
    移除监听函数：

    1
    btn.onclick = null;
    这种方式所有浏览器都兼容，但是逻辑与显示并没有分离。

    IE事件模型
    IE事件模型共有两个过程:

    事件处理阶段(target phase)。事件到达目标元素, 触发目标元素的监听函数。
    事件冒泡阶段(bubbling phase)。事件从目标元素冒泡到document, 依次检查经过的节点是否绑定了事件监听函数，如果有则执行。
    事件绑定监听函数的方式如下:

    1
    attachEvent(eventType, handler)
    

    事件移除监听函数的方式如下:

    1
    detachEvent(eventType, handler)
    

    参数说明:

    eventType指定事件类型(注意加on)
    handler是事件处理函数
    Example:

    1
    2
    3
    var btn = document.getElementById('.btn');
    btn.attachEvent(‘onclick’, showMessage);
    btn.detachEvent(‘onclick’, showMessage);
    

    DOM2级模型
    属于W3C标准模型，现代浏览器(除IE6-8之外的浏览器)都支持该模型。在该事件模型中，一次事件共有三个过程:

    事件捕获阶段(capturing phase)。事件从document一直向下传播到目标元素, 依次检查经过的节点是否绑定了事件监听函数，如果有则执行。
    事件处理阶段(target phase)。事件到达目标元素, 触发目标元素的监听函数。
    事件冒泡阶段(bubbling phase)。事件从目标元素冒泡到document, 依次检查经过的节点是否绑定了事件监听函数，如果有则执行。
    事件绑定监听函数的方式如下:

    1
    addEventListener(eventType, handler, useCapture)
    

    事件移除监听函数的方式如下:

    1
    removeEventListener(eventType, handler, useCapture)
    

    Example:

    1
    2
    3
    var btn = document.getElementById('.btn');
    btn.addEventListener(‘click’, showMessage, false);
    btn.removeEventListener(‘click’, showMessage, false);


26. null和undefined的区别？

null是一个表示"无"的对象，转为数值时为0；undefined是一个表示"无"的原始值，转为数值时为NaN。

当声明的变量还未被初始化时，变量的默认值为undefined。 null用来表示尚未存在的对象

undefined表示"缺少值"，就是此处应该有一个值，但是还没有定义。典型用法是：

（1）变量被声明了，但没有赋值时，就等于undefined。

（2）调用函数时，应该提供的参数没有提供，该参数等于undefined。

（3）对象没有赋值的属性，该属性的值为undefined。

（4）函数没有返回值时，默认返回undefined。

null表示"没有对象"，即该处不应该有值。典型用法是：

（1） 作为函数的参数，表示该函数的参数不是对象。

（2） 作为对象原型链的终点。



42. js中的3种弹出式消息提醒（警告窗口，确认窗口，信息输入窗口）的命令式什么？

alert
confirm
prompt

定义类的5种方式
    1．工厂方式
    2．构造函数
    3．原型方式
    4. 混合的构造函数/原型模式
    5.动态原型
    6 混合工厂方式
82、什么是虚拟dom

React为啥这么大？因为它实现了一个虚拟DOM（Virtual DOM）。虚拟DOM是干什么的？这就要从浏览器本身讲起

如我们所知，在浏览器渲染网页的过程中，加载到HTML文档后，会将文档解析并构建DOM树，然后将其与解析CSS生成的CSSOM树一起结合产生爱的结晶——RenderObject树，然后将RenderObject树渲染成页面（当然中间可能会有一些优化，比如RenderLayer树）。这些过程都存在与渲染引擎之中，渲染引擎在浏览器中是于JavaScript引擎（JavaScriptCore也好V8也好）分离开的，但为了方便JS操作DOM结构，渲染引擎会暴露一些接口供JavaScript调用。由于这两块相互分离，通信是需要付出代价的，因此JavaScript调用DOM提供的接口性能不咋地。各种性能优化的最佳实践也都在尽可能的减少DOM操作次数。

而虚拟DOM干了什么？它直接用JavaScript实现了DOM树（大致上）。组件的HTML结构并不会直接生成DOM，而是映射生成虚拟的JavaScript DOM结构，React又通过在这个虚拟DOM上实现了一个 diff 算法找出最小变更，再把这些变更写入实际的DOM中。这个虚拟DOM以JS结构的形式存在，计算性能会比较好，而且由于减少了实际DOM操作次数，性能会有较大提升

js 中怎么使用 promise

es6 新增了哪些特新  
1.不一样的变量声明：const和let
    ES6推荐使用let声明局部变量，相比之前的var（无论声明在何处，都会被视为声明在函数的最顶部）

        为什么推荐使用 let 生命局部变量将？
    const  let  var 有什么区别
2.模板字符串
    `${name},${sex}`
3.箭头函数（Arrow Functions）
    ES6 中，箭头函数就是函数的一种简写形式，使用括号包裹参数，跟随一个 =>，紧接着是函数体；

    箭头函数最直观的三个特点。
        不需要 function 关键字来创建函数
        省略 return 关键字
        继承当前上下文的 this 关键字
4. 函数的参数默认值
    // ES6之前，当未传入参数时，text = 'default'；
    function printText(text) {
        text = text || 'default';
        console.log(text);
    }

    // ES6；
    function printText(text = 'default') {
        console.log(text);
    }

    printText('hello'); // hello
    printText();// default
5.Spread / Reset 操作符
    ... 
    当被用于迭代器中时，它是一个 Spread 操作符：

    当被用于函数传参时，是一个 Rest 操作符：当被用于函数传参时，是一个 Rest 操作符：
6.二进制和八进制字面量
    ES6 支持二进制和八进制的字面量，通过在数字前面添加 0o 或者0O 即可将其转换为八进制值：
    
    let oValue = 0o10;
    console.log(oValue); // 8
    
    let bValue = 0b10; // 二进制使用 `0b` 或者 `0B`
    console.log(bValue); // 2
7.对象和数组解构
     // 对象
    const student = {
        name: 'Sam',
        age: 22,
        sex: '男'
    }
    // 数组
    // const student = ['Sam', 22, '男'];

    // ES5；
    const name = student.name;
    const age = student.age;
    const sex = student.sex;
    console.log(name + ' --- ' + age + ' --- ' + sex);

    // ES6
    const { name, age, sex } = student;
    console.log(name + ' --- ' + age + ' --- ' + sex);
8.对象超类
    ES6 允许在对象中使用 super 方法：

9.for...of 和 for...in
    for...of 用于遍历一个迭代器，如数组：
    for...in 用来遍历对象中的属性：
10.ES6中的类
    ES6 中支持 class 语法，不过，ES6的class不是新的对象继承模型，它只是原型链的语法糖表现形式。

    类中的继承和超集：
        class MI extends Phone {
            constructor() {
                super();
                console.log("I'm a phone designed by xiaomi");
            }
        }

        有几点值得注意的是：

        类的声明不会提升（hoisting)，如果你要使用某个 Class，那你必须在使用之前定义它，否则会抛出一个 ReferenceError 的错误
        在类中定义函数不需要使用 function 关键词

        作者：木亦Sam
        链接：https://www.jianshu.com/p/ac1787f6c50f

10 





