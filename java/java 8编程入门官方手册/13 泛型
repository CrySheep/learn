了解泛型的好处
创建泛型类
应用约束的类型形参
使用通配符实参
应用约束通配符
创建泛型方法
创建泛型构造函数
创建泛型接口
使用原类型 raw type 
使用菱形运算符进行类型推断
了解擦出特性
避免歧义错误
了解泛型的限制


泛型
    参数化类型 parameterized type 
        使程序员能创建将要操作的数据类型作为形参的类、接口和方法。操作类型形参的类、接口和方法就称为是泛型的，如泛型类、泛型方法等
    优点：
        它们可以自动处理传递给其类型参数的数据类型。使用泛型，就可以独立于特定类型来一次性定义算法，然后把该算法应用于各种数据类型，而不需要做额外的工作。
        泛型提供了类型安全性，因为它让这些强制类型转换自动地、隐式地进行。
        总之，泛型扩展了重用代码的能力，并且可以更安全、可靠地进行
    类型擦除
        Java编译器不会实际创建不同版本的泛型，实际上，编译器会删除所有的泛型类型信息，执行不要的类型转换，已变保证代码的行为与创建的特定版本相符合。
    只能用于引用类型
        都会转为Object 
    实参类型相同才相同
    约束类型
        上层约束 upper bound 
            <T extends sperclass>
    通配符实参
        ？
            boolean absEqual(NumericFns<?>ob){
                if(Math.abs(num.doubleValue())==Math.abs(ob.num.doubleValue())) return true;
                return false;
            }
        匹配任何有效的对象

        约束通配符
            <? extends superclass> 
                上层约束 superclass 的子类
            <? super subclass> 
                下层约束 subclass 的子类  
        泛型类强制类型转换
            不是泛化的
    泛型方法
        <type-param-list> ret-type meth-name(param-list){}
        泛型参数列表位于返回类型之前
    泛型构造函数
        类不是泛型类，构造函数也可以是泛型的
    泛型接口
        声明同类
        也可以设定约束
        实现类必须指定相同的约定
            interface Containment<T extends Number>{}
            class MyClass<T extends Number> implements<T>{} // 无需在 implements 子句中再次指定
    
    原类型和遗留代码
        JDK5 之前不支持泛型
        为了处理泛型的过渡问题，java运行不带任何类型实参来使用泛型类。这样穿件一个愿类型  raw type 的类 
        原类型与不识别泛型的遗留代码兼容。
        缺点
            丧失了泛型的类型安全性
        被Object 类型替代
        编译器跳过类型检查，产生未检测警告  unchecked warning 
    类型推断
        jdk7 
    类型擦除：
        java 的泛型是一种源码机制。为了兼容遗留代码，通过擦除特性实现
        当java 代码编译时，所有的泛型类型信息都将被删除。这意味着使用类型型参的约束类型来替换类型型参，如果没有显式地指定约束类型，则约束类型为O北京恶臭v天，然后应用合适的强制类型转换（由类型实参确定）来与类型实参指定的类型保持兼容。这意味着运行时不存在类型参数
    歧义错误
        当擦除特性导致两个明显不同的泛型声明被解析为相同的擦除类型，进而导致冲突时，就会产生歧义错误。
        class MyGenClass<T,V>{
            T obj1;
            V obj2
            void set(T o){
                obj1=o;
            }
            void set(V o){
                obj2=o;
            }
        }
    泛型限制
        类型参数不能实例化
        静态成员限制
            静态成员不能使用包含类声明的类型型参
        泛型数组限制
            不能实例化基类型为类型型参的数组
                T vals[]= new T[10];//error
            不能创建特定类型泛型引用的数组
                Gen<Integer> gens[] = new Gen<Integer>[10];//error
            
            Gen<?> gens[] = new Gen<?>[10];//ok
        泛型异常限制
            泛型类不能扩展Throwable ，这意味着不能创建泛型异常类

自测题
    1 泛型是java 添加的一项重要功能，因为它使得代码的创建
        A 类型安全
        B 可重用
        C 可靠
        D 上述都对

        D 
    2 基本类型能够用作类型实参吗？
        不能，类型实参必须是引用类型
    3 说明如何声明一个名为FlightSched 的类，它带有两个泛型型参 
        class FlightSched<T,V>{}
    4 对自测题3，修改FlightSched 的第二个类型型参，使得它必须扩展Thread 
        class FlightSched<T,V extends Thread>{}
    5 现在，修改FlightSched 的第二个形参，使得它称为第一个类型形参的子类
        class FlightSched<T,V extends T>{}
    6 就泛型而言，“？”代表什么？它的作用是什么
        是通配符实参，能匹配任何有效类型。
    7 通配符实参可以约束吗
        可以，通配符实参既可以有上层约束，也可以有下层约束     
    8 泛型方法MyGen 带有一个类型形参。而且，MyGen 带有一个类型与该类型形参相同的形参。它海返回该类型形参的对象。写如何声明MyGen
        <V> V MyGen(V v){}
    9 对于下面的泛型接口：提供实现IGenIF 的 MyClass 的声明
        interface IGenIF<T,V extends T>{}
        MyClass <T,V extends> implements IGenIF<T,V>{}
    10 对于泛型类Counter<T> ,说明如何创建一个其原型类型的对象
        Counter x= new Counter();
    11 类型形参在运行时存在吗？
        不存在，所有的类型形参在编译时都被擦除，由合适的强制转换替代。这一过程称为擦除
    12 把第9章自测题10中的解决方案转换为泛型解决方案。在转换过程中，创建一个以泛型方式定义操作push 和pop 的堆栈接口IGenStack 

    13 <> 是什么
        菱形运算符
    14 如何简化下面的语句
        MyClass<Double,String> obj= new MyClass<Double,String>(1.1,"Hi");
        MyClass<Double,String> obj = new MyClass<>(1.1,"Hi");





        

