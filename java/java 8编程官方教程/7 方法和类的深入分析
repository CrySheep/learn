重载、参数传递和递归
反问控制、static 关键字 
String 类

重载：
    名称相同，参数声明不同
    重载是java 支持多态性的方法之一

    返回类型在重载版本判断中不起作用

    自动类型转换在重载中可以发挥作用

参数传递
    值调用
    引用调用
        当对象引用传递给方法，引用本身是使用值调用传递的。由于传递的值引用一个对象，因此值的副本仍然引用相应实参指向的同一个对象
返回对象

递归
    方法调用自身的特性
    比等价的迭代版本更慢一些，因为增加了额外的函数调用负担。对方法进行大量的递归调用可能导致堆栈溢出
        参数和局部变量存储在堆栈中，每次调用都会创建这些变量新的副本。
    优点：
        某些算法，使用递归可以创建比迭代更清晰并且简单的版本。
访问控制
    访问修饰符
        public private protected 默认访问 

        public  所有类
        private 本类
        protected  同包和子类
        默认 同包

static 
    类本身使用，而不需要通过特定实例的引用
    限制
        只能调用静态方法
        只能直接访问静态数据
        不能使用this 和 supper关键字
final 关键字
    可以防止内容被改  类 、方法、成员变量
    赋值：
        变量声明时
        构造函数中
    final 变量全部用大写 （约定）
嵌套类和内部类：
    类的内部定义另一个类
    嵌套类可以访问包含类的成员
    类型
        静态
            static 
            不能访问包含类的非静态成员
        非静态
            内部类，非静态
String 
    一旦创建，内容就不能改变
    修改实际创建了新类
    StringBuffer 和 StringBuidler  可修改
    运算符
        +
可变长度参数
    jdk5 varargs 
    运算符
        ...
        告诉编译器将要使用可变长度参数，并且这些参数将被存储在v引用中
    重载
        可重载
        模糊性：
            存在两个可调用的可变参数方法，而没有更精确匹配的非可变参数方法


