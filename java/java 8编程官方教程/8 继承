面向对象编程基石之一
可以创建层次化分类。

一般类 特殊类
超类 子类 

超类变量可以引用子类对象
变量类型决定可访问的成员


super 关键字
    调用超类的构造函数
        构造函数第一条
    访问被子类隐藏的成员
构造函数调用顺序
    超类到子类

方法重写
    如果子类的一个方法和超类中的某个方法具有相同的名称和类型签名，那么子类中的方法重写了超类中相应的方法。当在子类中调用被重写的方法时，总是调用由子类定义的版本。超类版本被隐藏。
    重写是多台的另一种实现方式
动态方法调用
    方法重写，动态方法调用的基础
    运行时，而不是编译时决定方法调用
抽象类
    abstract 
    含有抽象方法的类必须被定义为抽象类
继承中使用final
    final 关键字的三种用途
        1 用于创建已命名常量的等价物。
        2 阻止重写
            方法声明为final 
            还可以提高性能，编译为内联方法
            final 方法调用在编译时解析，早期绑定
        3 阻止继承
            类声明为final 
Object 
    clonse 
    equals 
    finalize()
    getClass 
    hashCode
    notify
    notifyAll 
    toString 
    wait (| long milliseconds| long milliseconds , int namaseconds)

